// src/types/monthlyPayments.types.ts
// 📝 TIPOS SIMPLIFICADOS PARA PAGOS MENSUALES
// 🎯 Reglas de negocio: Vence el 15, precio variable, suspensión no devuelve pagos

/**
 * 💳 PAGO MENSUAL INDIVIDUAL
 * Representa un cargo mensual específico para una actividad
 */
export interface MonthlyPayment {
  id?: string;
  
  // 👤 Identificación
  memberId: string;
  memberName: string;
  
  // 🏃 Actividad/Membresía
  membershipId: string;      // ID de la membresía permanente
  activityId: string;
  activityName: string;
  
  // 📅 Período (mes específico)
  month: string;             // Formato: "YYYY-MM" (ej: "2025-10")
  dueDate: string;           // Siempre "YYYY-MM-15" (día 15)
  
  // 💰 Montos
  amount: number;            // Precio del mes (puede cambiar mes a mes)
  
  // ✅ Estado
  status: 'pending' | 'paid' | 'overdue';
  
  // 📝 Registro de pago (cuando se paga)
  paidAt?: any;              // Firebase Timestamp
  paidDate?: string;         // YYYY-MM-DD
  transactionId?: string;    // Link a la transacción
  
  // 🤖 Metadata
  generatedAt: any;          // Firebase Timestamp - cuándo se creó
  autoGenerated: boolean;    // true = creado automáticamente
  createdBy?: string;        // Usuario que lo creó (si manual)
}

/**
 * 💼 MEMBRESÍA (Relación permanente socio-actividad)
 * Esta NO se renueva, es permanente hasta que se suspenda
 */
export interface MembershipStatus {
  id?: string;
  
  // 👤 Socio
  memberId: string;
  memberName: string;
  
  // 🏃 Actividad
  activityId: string;
  activityName: string;
  
  // 📅 Fechas
  startDate: string;         // YYYY-MM-DD - cuándo se dio de alta
  
  // ✅ Estado
  status: 'active' | 'suspended';
  
  // 🤖 Auto-generación de pagos
  autoGeneratePayments: boolean;  // true por defecto
  
  // 📝 Metadata
  createdAt: any;            // Firebase Timestamp
  updatedAt?: any;           // Firebase Timestamp
  suspendedAt?: any;         // Cuándo se suspendió (si aplica)
  suspendedReason?: string;  // Motivo de suspensión
}

/**
 * 📊 RESUMEN MENSUAL
 * Estadísticas agregadas de un mes específico
 */
export interface MonthlySummary {
  year: number;
  month: number;              // 1-12
  
  // 📈 Totales
  totalMembers: number;       // Socios con pagos este mes
  totalToCollect: number;     // Total a cobrar
  totalCollected: number;     // Total cobrado
  totalPending: number;       // Total pendiente
  
  // 👥 Socios
  membersWithDebt: number;    // Cuántos deben
  membersUpToDate: number;    // Cuántos están al día
  
  // 🏃 Por actividad
  activitiesBreakdown: {
    [activityName: string]: {
      members: number;
      totalCost: number;
      collected: number;
      pending: number;
    };
  };
}

/**
 * 📋 ITEM DE LISTA (Para el dashboard)
 * Vista resumida de un socio y sus pagos pendientes
 */
export interface MonthlyPaymentListItem {
  memberId: string;
  memberName: string;
  memberEmail?: string;
  totalPending: number;
  activitiesPendingCount: number;
  isOverdue: boolean;
  daysOverdue: number;
  pendingActivities: {  // ← Se llama pendingActivities, NO activities
    paymentId: string;
    membershipId: string;
    activityName: string;
    amount: number;
    dueDate: string;
    status: 'pending' | 'overdue';
  }[];
}

/**
 * ⚙️ CONFIGURACIÓN DE AUTOMATIZACIÓN
 * Reglas para generar pagos automáticamente
 */
export interface AutoGenerationConfig {
  enabled: boolean;
  
  // 📅 NO usar día del mes, siempre es el 15
  // Solo verificar si ya se generó para este mes
  lastProcessedMonth?: string;  // "YYYY-MM"
  
  // 🔧 Opciones
  onlyActiveMembers: boolean;        // Solo socios activos
  onlySuspendedMemberships: boolean; // Excluir membresías suspendidas
}

/**
 * 💳 MÉTODO DE PAGO
 */
export type PaymentMethod = 'cash' | 'transfer' | 'card' | 'mercadopago';

/**
 * 📝 RESULTADO DE OPERACIÓN
 */
export interface OperationResult {
  success: boolean;
  message?: string;
  error?: string;
  data?: any;
}

/**
 * 🤖 RESULTADO DE AUTO-GENERACIÓN
 */
export interface AutoGenerationResult {
  success: boolean;
  paymentsGenerated: number;
  errors: string[];
  summary: {
    totalMembers: number;
    totalMemberships: number;
    totalAmount: number;
    skipped: {
      suspended: number;
      alreadyExists: number;
    };
  };
}