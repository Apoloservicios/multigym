// src/utils/membershipMigration.util.ts
// üîÑ UTILIDAD DE MIGRACI√ìN - Actualizar datos existentes al nuevo sistema

import { 
  collection, 
  getDocs, 
  updateDoc, 
  doc, 
  query, 
  where,
  Timestamp 
} from 'firebase/firestore';
import { db } from '../config/firebase';
import { MembershipAssignment } from '../types/gym.types';

export class MembershipMigrationUtil {
  
  /**
   * üÜï MIGRACI√ìN PRINCIPAL: Actualizar membres√≠as existentes
   * Esta funci√≥n actualiza todas las membres√≠as para que tengan:
   * - autoRenewal: true por defecto
   * - paymentType: 'monthly' (no m√°s pagos √∫nicos)
   * - paymentStatus: 'pending' si no est√° definido
   */
  static async migrateMembershipsToNewSystem(gymId: string): Promise<{
    success: boolean;
    updated: number;
    errors: string[];
  }> {
    console.log('üîÑ INICIANDO MIGRACI√ìN DE MEMBRES√çAS...');
    console.log('=====================================');
    
    const results = {
      success: true,
      updated: 0,
      errors: [] as string[]
    };
    
    try {
      // Obtener todas las membres√≠as del gimnasio
      const membershipsRef = collection(db, `gyms/${gymId}/membershipAssignments`);
      const querySnapshot = await getDocs(membershipsRef);
      
      console.log(`üìä Encontradas ${querySnapshot.docs.length} membres√≠as para migrar`);
      
      // Procesar cada membres√≠a
      for (const docSnapshot of querySnapshot.docs) {
        try {
          const membershipData = docSnapshot.data() as Partial<MembershipAssignment>;
          const membershipId = docSnapshot.id;
          
          console.log(`üîç Procesando membres√≠a: ${membershipData.memberName} - ${membershipData.activityName}`);
          
          // Preparar los datos de actualizaci√≥n
          const updateData: Partial<MembershipAssignment> = {
            updatedAt: Timestamp.now()
          };
          
          // üéØ CONFIGURAR AUTO-RENOVACI√ìN SI NO EST√Å DEFINIDA
          if (membershipData.autoRenewal === undefined || membershipData.autoRenewal === null) {
            updateData.autoRenewal = true;
            console.log('  ‚úÖ Auto-renovaci√≥n configurada como true');
          }
          
          // üéØ CONFIGURAR TIPO DE PAGO COMO MENSUAL
          if (!membershipData.paymentType || membershipData.paymentType !== 'monthly') {
            updateData.paymentType = 'monthly';
            console.log('  ‚úÖ Tipo de pago configurado como monthly');
          }
          
          // üéØ CONFIGURAR ESTADO DE PAGO SI NO EST√Å DEFINIDO
          if (!membershipData.paymentStatus) {
            updateData.paymentStatus = 'pending';
            console.log('  ‚úÖ Estado de pago configurado como pending');
          }
          
          // üéØ ASEGURAR QUE TENGA STATUS
          if (!membershipData.status) {
            // Determinar status basado en fecha de vencimiento
            const today = new Date().toISOString().split('T')[0];
            updateData.status = membershipData.endDate && membershipData.endDate < today ? 'expired' : 'active';
            console.log(`  ‚úÖ Status configurado como ${updateData.status}`);
          }
          
          // Solo actualizar si hay cambios
          if (Object.keys(updateData).length > 1) { // >1 porque siempre tiene updatedAt
            await updateDoc(doc(db, `gyms/${gymId}/membershipAssignments`, membershipId), updateData);
            results.updated++;
            console.log(`  ‚úÖ Membres√≠a ${membershipId} actualizada`);
          } else {
            console.log('  ‚ÑπÔ∏è No requiere actualizaci√≥n');
          }
          
        } catch (error) {
          const errorMsg = `Error actualizando membres√≠a ${docSnapshot.id}: ${error}`;
          console.error('  ‚ùå', errorMsg);
          results.errors.push(errorMsg);
        }
      }
      
      console.log('\nüìä RESULTADO DE LA MIGRACI√ìN:');
      console.log('============================');
      console.log(`‚úÖ Membres√≠as actualizadas: ${results.updated}`);
      console.log(`‚ùå Errores: ${results.errors.length}`);
      
      if (results.errors.length > 0) {
        console.log('\n‚ùå ERRORES ENCONTRADOS:');
        results.errors.forEach(error => console.log(`  - ${error}`));
        results.success = false;
      }
      
    } catch (error) {
      console.error('‚ùå Error general en la migraci√≥n:', error);
      results.success = false;
      results.errors.push(`Error general: ${error}`);
    }
    
    return results;
  }
  
  /**
   * üßπ Limpiar datos inconsistentes
   * Esta funci√≥n identifica y corrige problemas comunes
   */
  static async cleanInconsistentData(gymId: string): Promise<{
    success: boolean;
    cleaned: number;
    issues: string[];
  }> {
    console.log('\nüßπ INICIANDO LIMPIEZA DE DATOS INCONSISTENTES...');
    console.log('==============================================');
    
    const results = {
      success: true,
      cleaned: 0,
      issues: [] as string[]
    };
    
    try {
      const membershipsRef = collection(db, `gyms/${gymId}/membershipAssignments`);
      const querySnapshot = await getDocs(membershipsRef);
      
      for (const docSnapshot of querySnapshot.docs) {
        try {
          const membershipData = docSnapshot.data() as Partial<MembershipAssignment>;
          const membershipId = docSnapshot.id;
          let needsUpdate = false;
          const updateData: Partial<MembershipAssignment> = {};
          
          // üîç Verificar campos requeridos
          const requiredFields = ['memberName', 'activityName', 'cost', 'startDate', 'endDate'];
          for (const field of requiredFields) {
            if (!membershipData[field as keyof MembershipAssignment]) {
              results.issues.push(`Membres√≠a ${membershipId}: Falta campo ${field}`);
            }
          }
          
          // üîç Verificar fechas v√°lidas
          if (membershipData.startDate && membershipData.endDate) {
            const startDate = new Date(membershipData.startDate);
            const endDate = new Date(membershipData.endDate);
            
            if (startDate > endDate) {
              results.issues.push(`Membres√≠a ${membershipId}: Fecha de inicio posterior a fecha de fin`);
            }
          }
          
          // üîç Verificar costo v√°lido
          if (membershipData.cost && (membershipData.cost < 0 || isNaN(membershipData.cost))) {
            results.issues.push(`Membres√≠a ${membershipId}: Costo inv√°lido (${membershipData.cost})`);
          }
          
          // üîß Corregir paymentType inv√°lido
          if (membershipData.paymentType && membershipData.paymentType !== 'monthly') {
            updateData.paymentType = 'monthly';
            needsUpdate = true;
            console.log(`  üîß Corrigiendo paymentType de membres√≠a ${membershipId}`);
          }
          
          // üîß Corregir autoRenewal undefined
          if (membershipData.autoRenewal === undefined || membershipData.autoRenewal === null) {
            updateData.autoRenewal = true;
            needsUpdate = true;
            console.log(`  üîß Configurando autoRenewal de membres√≠a ${membershipId}`);
          }
          
          // üîß Actualizar status basado en fecha de vencimiento
          if (membershipData.endDate) {
            const today = new Date().toISOString().split('T')[0];
            const currentStatus = membershipData.status;
            const shouldBeExpired = membershipData.endDate < today;
            
            if (shouldBeExpired && currentStatus === 'active') {
              updateData.status = 'expired';
              needsUpdate = true;
              console.log(`  üîß Marcando como expired membres√≠a ${membershipId}`);
            } else if (!shouldBeExpired && currentStatus === 'expired') {
              updateData.status = 'active';
              needsUpdate = true;
              console.log(`  üîß Marcando como active membres√≠a ${membershipId}`);
            }
          }
          
          // Aplicar actualizaciones si es necesario
          if (needsUpdate) {
            updateData.updatedAt = Timestamp.now();
            await updateDoc(doc(db, `gyms/${gymId}/membershipAssignments`, membershipId), updateData);
            results.cleaned++;
            console.log(`  ‚úÖ Datos inconsistentes corregidos en membres√≠a ${membershipId}`);
          }
          
        } catch (error) {
          const errorMsg = `Error limpiando membres√≠a ${docSnapshot.id}: ${error}`;
          console.error('  ‚ùå', errorMsg);
          results.issues.push(errorMsg);
        }
      }
      
      console.log('\nüìä RESULTADO DE LA LIMPIEZA:');
      console.log('============================');
      console.log(`üßπ Registros limpiados: ${results.cleaned}`);
      console.log(`‚ö†Ô∏è Problemas identificados: ${results.issues.length}`);
      
      if (results.issues.length > 0) {
        console.log('\n‚ö†Ô∏è PROBLEMAS ENCONTRADOS:');
        results.issues.forEach(issue => console.log(`  - ${issue}`));
      }
      
    } catch (error) {
      console.error('‚ùå Error general en la limpieza:', error);
      results.success = false;
      results.issues.push(`Error general: ${error}`);
    }
    
    return results;
  }
  
  /**
   * üìä Generar reporte de estado antes de migraci√≥n
   */
  static async generatePreMigrationReport(gymId: string): Promise<void> {
    console.log('üìä REPORTE PRE-MIGRACI√ìN');
    console.log('=======================');
    
    try {
      const membershipsRef = collection(db, `gyms/${gymId}/membershipAssignments`);
      const querySnapshot = await getDocs(membershipsRef);
      
      let totalMemberships = 0;
      let withAutoRenewal = 0;
      let withoutAutoRenewal = 0;
      let monthlyPayments = 0;
      let uniquePayments = 0;
      let unknownPayments = 0;
      let activeMemberships = 0;
      let expiredMemberships = 0;
      
      querySnapshot.docs.forEach(doc => {
        const data = doc.data() as Partial<MembershipAssignment>;
        totalMemberships++;
        
        // Analizar auto-renovaci√≥n
        if (data.autoRenewal === true) {
          withAutoRenewal++;
        } else {
          withoutAutoRenewal++;
        }
        
        // Analizar tipo de pago
        if (data.paymentType === 'monthly') {
          monthlyPayments++;
        } else if (data.paymentType === 'unique') {
          uniquePayments++;
        } else {
          unknownPayments++;
        }
        
        // Analizar estado
        if (data.status === 'active') {
          activeMemberships++;
        } else if (data.status === 'expired') {
          expiredMemberships++;
        }
      });
      
      console.log(`üìà Total de membres√≠as: ${totalMemberships}`);
      console.log(`‚úÖ Con auto-renovaci√≥n: ${withAutoRenewal}`);
      console.log(`‚ùå Sin auto-renovaci√≥n: ${withoutAutoRenewal}`);
      console.log(`üí∞ Pagos mensuales: ${monthlyPayments}`);
      console.log(`üí∏ Pagos √∫nicos: ${uniquePayments}`);
      console.log(`‚ùì Tipo de pago desconocido: ${unknownPayments}`);
      console.log(`üü¢ Membres√≠as activas: ${activeMemberships}`);
      console.log(`üî¥ Membres√≠as vencidas: ${expiredMemberships}`);
      
      // Recomendaciones
      console.log('\nüí° RECOMENDACIONES:');
      if (withoutAutoRenewal > 0) {
        console.log(`  - ${withoutAutoRenewal} membres√≠as necesitan auto-renovaci√≥n activada`);
      }
      if (uniquePayments > 0) {
        console.log(`  - ${uniquePayments} membres√≠as con pagos √∫nicos ser√°n convertidas a mensuales`);
      }
      if (unknownPayments > 0) {
        console.log(`  - ${unknownPayments} membres√≠as tienen tipo de pago indefinido`);
      }
      
    } catch (error) {
      console.error('‚ùå Error generando reporte:', error);
    }
  }
  
  /**
   * üöÄ Funci√≥n principal para ejecutar migraci√≥n completa
   */
  static async runFullMigration(gymId: string): Promise<void> {
    console.log('üöÄ INICIANDO MIGRACI√ìN COMPLETA DEL SISTEMA');
    console.log('==========================================');
    
    try {
      // 1. Generar reporte pre-migraci√≥n
      console.log('\nüìä Paso 1: An√°lisis inicial...');
      await this.generatePreMigrationReport(gymId);
      
      // 2. Ejecutar migraci√≥n principal
      console.log('\nüîÑ Paso 2: Migrando membres√≠as...');
      const migrationResult = await this.migrateMembershipsToNewSystem(gymId);
      
      // 3. Limpiar datos inconsistentes
      console.log('\nüßπ Paso 3: Limpiando datos inconsistentes...');
      const cleanupResult = await this.cleanInconsistentData(gymId);
      
      // 4. Reporte final
      console.log('\nüéâ MIGRACI√ìN COMPLETADA!');
      console.log('========================');
      console.log(`‚úÖ Membres√≠as migradas: ${migrationResult.updated}`);
      console.log(`üßπ Registros limpiados: ${cleanupResult.cleaned}`);
      console.log(`‚ùå Errores totales: ${migrationResult.errors.length + cleanupResult.issues.length}`);
      
      if (migrationResult.success && cleanupResult.success) {
        console.log('\nüéØ ¬°MIGRACI√ìN EXITOSA!');
        console.log('El sistema est√° listo para usar con las nuevas funcionalidades.');
        console.log('');
        console.log('üìù PR√ìXIMOS PASOS:');
        console.log('1. Recarga la p√°gina de la aplicaci√≥n');
        console.log('2. Ve al dashboard de renovaciones');
        console.log('3. Verifica que las estad√≠sticas se muestren correctamente');
        console.log('4. Prueba la pesta√±a "Vencidas"');
        console.log('5. Crea una nueva membres√≠a para verificar que tenga auto-renovaci√≥n por defecto');
      } else {
        console.log('\n‚ö†Ô∏è MIGRACI√ìN CON ADVERTENCIAS');
        console.log('Revisa los errores listados arriba y ejecuta la migraci√≥n nuevamente si es necesario.');
      }
      
    } catch (error) {
      console.error('‚ùå Error cr√≠tico en la migraci√≥n completa:', error);
    }
  }
  
  /**
   * üîç Verificar estado del sistema despu√©s de migraci√≥n
   */
  static async verifySystemHealth(gymId: string): Promise<{
    healthy: boolean;
    issues: string[];
    stats: {
      total: number;
      withAutoRenewal: number;
      monthlyPayments: number;
      activeStatus: number;
    };
  }> {
    console.log('üîç VERIFICANDO SALUD DEL SISTEMA POST-MIGRACI√ìN');
    console.log('==============================================');
    
    const result = {
      healthy: true,
      issues: [] as string[],
      stats: {
        total: 0,
        withAutoRenewal: 0,
        monthlyPayments: 0,
        activeStatus: 0
      }
    };
    
    try {
      const membershipsRef = collection(db, `gyms/${gymId}/membershipAssignments`);
      const querySnapshot = await getDocs(membershipsRef);
      
      querySnapshot.docs.forEach(doc => {
        const data = doc.data() as Partial<MembershipAssignment>;
        result.stats.total++;
        
        // Verificar auto-renovaci√≥n
        if (data.autoRenewal === true) {
          result.stats.withAutoRenewal++;
        } else {
          result.issues.push(`Membres√≠a ${doc.id}: No tiene auto-renovaci√≥n activada`);
          result.healthy = false;
        }
        
        // Verificar tipo de pago
        if (data.paymentType === 'monthly') {
          result.stats.monthlyPayments++;
        } else {
          result.issues.push(`Membres√≠a ${doc.id}: Tipo de pago no es mensual (${data.paymentType})`);
          result.healthy = false;
        }
        
        // Verificar estado
        if (data.status === 'active' || data.status === 'expired') {
          result.stats.activeStatus++;
        } else {
          result.issues.push(`Membres√≠a ${doc.id}: Estado inv√°lido (${data.status})`);
          result.healthy = false;
        }
        
        // Verificar campos requeridos
        if (!data.memberName || !data.activityName) {
          result.issues.push(`Membres√≠a ${doc.id}: Faltan datos b√°sicos`);
          result.healthy = false;
        }
      });
      
      console.log('üìä ESTAD√çSTICAS POST-MIGRACI√ìN:');
      console.log(`‚Ä¢ Total membres√≠as: ${result.stats.total}`);
      console.log(`‚Ä¢ Con auto-renovaci√≥n: ${result.stats.withAutoRenewal}`);
      console.log(`‚Ä¢ Con pagos mensuales: ${result.stats.monthlyPayments}`);
      console.log(`‚Ä¢ Con estado v√°lido: ${result.stats.activeStatus}`);
      
      if (result.healthy) {
        console.log('\n‚úÖ SISTEMA SALUDABLE');
        console.log('Todas las membres√≠as est√°n correctamente configuradas.');
      } else {
        console.log('\n‚ö†Ô∏è PROBLEMAS DETECTADOS:');
        result.issues.forEach(issue => console.log(`  - ${issue}`));
      }
      
    } catch (error) {
      console.error('‚ùå Error verificando salud del sistema:', error);
      result.healthy = false;
      result.issues.push(`Error de verificaci√≥n: ${error}`);
    }
    
    return result;
  }
}

// ====================================================================
// FUNCIONES GLOBALES PARA EJECUTAR EN CONSOLA DEL NAVEGADOR
// ====================================================================

/**
 * üéØ Funci√≥n global para ejecutar migraci√≥n completa
 * USAR EN CONSOLA: await runMigration('TU_GYM_ID_AQUI')
 */
declare global {
  interface Window {
    runMigration: (gymId: string) => Promise<void>;
    runPreMigrationReport: (gymId: string) => Promise<void>;
    verifySystem: (gymId: string) => Promise<void>;
  }
}

// Hacer funciones disponibles globalmente para la consola
if (typeof window !== 'undefined') {
  window.runMigration = async (gymId: string) => {
    if (!gymId) {
      console.error('‚ùå Debes proporcionar el ID del gimnasio');
      console.log('Ejemplo: await runMigration("tu-gym-id-aqui")');
      return;
    }
    
    await MembershipMigrationUtil.runFullMigration(gymId);
  };
  
  window.runPreMigrationReport = async (gymId: string) => {
    if (!gymId) {
      console.error('‚ùå Debes proporcionar el ID del gimnasio');
      return;
    }
    
    await MembershipMigrationUtil.generatePreMigrationReport(gymId);
  };
  
  window.verifySystem = async (gymId: string) => {
    if (!gymId) {
      console.error('‚ùå Debes proporcionar el ID del gimnasio');
      return;
    }
    
    await MembershipMigrationUtil.verifySystemHealth(gymId);
  };
  
  // Mensaje de ayuda
  setTimeout(() => {
    console.log('üîß HERRAMIENTAS DE MIGRACI√ìN DISPONIBLES:');
    console.log('========================================');
    console.log('1. Ver estado actual: await runPreMigrationReport("TU_GYM_ID")');
    console.log('2. Ejecutar migraci√≥n completa: await runMigration("TU_GYM_ID")');
    console.log('3. Verificar sistema: await verifySystem("TU_GYM_ID")');
    console.log('');
    console.log('‚ö†Ô∏è IMPORTANTE: Ejecuta la migraci√≥n UNA SOLA VEZ');
  }, 2000);
}

export default MembershipMigrationUtil;