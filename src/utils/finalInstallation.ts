// src/utils/finalInstallation.ts
// üöÄ INSTALACI√ìN FINAL Y VERIFICACI√ìN COMPLETA DEL SISTEMA

/**
 * Lista de archivos que deben estar creados
 */
export const REQUIRED_FILES = [
  {
    path: 'src/services/membershipRenewalService.ts',
    description: 'Servicio central de renovaciones',
    status: 'required'
  },
  {
    path: 'src/components/memberships/UnifiedRenewalDashboard.tsx',
    description: 'Dashboard principal unificado',
    status: 'required'
  },
  {
    path: 'src/components/memberships/IndividualMembershipManagement.tsx',
    description: 'Gesti√≥n individual por usuario',
    status: 'required'
  },
  {
    path: 'src/components/memberships/MonthlyReportGenerator.tsx',
    description: 'Generador de reportes Excel',
    status: 'required'
  },
  {
    path: 'src/hooks/useMonthlyRenewalAutomation.ts',
    description: 'Hook de automatizaci√≥n mensual',
    status: 'required'
  },
  {
    path: 'src/services/excelReportService.ts',
    description: 'Servicio de generaci√≥n de Excel',
    status: 'required'
  },
  {
    path: 'src/utils/format.utils.ts',
    description: 'Utilidades de formato',
    status: 'required'
  },
  {
    path: 'src/utils/membershipMigration.util.ts',
    description: 'Utilidad de migraci√≥n de datos',
    status: 'required'
  },
  {
    path: 'src/pages/MembershipManagement.tsx',
    description: 'P√°gina principal actualizada',
    status: 'updated'
  }
];

/**
 * Lista de archivos que se deben ELIMINAR
 */
export const FILES_TO_REMOVE = [
  'src/components/memberships/UnifiedMembershipDashboard.tsx',
  'src/components/memberships/AutoRenewalDashboard.tsx',
  'src/components/memberships/EnhancedMemberControls.tsx',
  'src/services/membershipExpiration.service.ts',
  'src/services/membershipAutoRenewal.service.ts',
  'src/hooks/useAutoRenewalScheduler.ts'
];

/**
 * Verificar la instalaci√≥n completa
 */
export const runCompleteInstallationCheck = (): void => {
  console.log('üîç VERIFICACI√ìN FINAL DEL SISTEMA DE RENOVACIONES');
  console.log('================================================');
  
  console.log('\nüìã ARCHIVOS REQUERIDOS:');
  REQUIRED_FILES.forEach((file, index) => {
    console.log(`${index + 1}. ${file.path}`);
    console.log(`   üìù ${file.description}`);
    console.log(`   üè∑Ô∏è  ${file.status === 'required' ? 'Nuevo archivo' : 'Archivo actualizado'}`);
    console.log('');
  });
  
  console.log('\nüóëÔ∏è  ARCHIVOS A ELIMINAR (ya no necesarios):');
  FILES_TO_REMOVE.forEach((file, index) => {
    console.log(`${index + 1}. ${file}`);
  });
  
  console.log('\nüì¶ DEPENDENCIAS REQUERIDAS:');
  console.log('1. npm install xlsx');
  console.log('   Para generar archivos Excel');
  
  console.log('\nüîß PASOS DE INSTALACI√ìN:');
  console.log('=======================');
  console.log('1. ‚úÖ Instalar dependencias: npm install xlsx');
  console.log('2. ‚úÖ Crear todos los archivos listados arriba');
  console.log('3. ‚úÖ Eliminar archivos obsoletos');
  console.log('4. ‚úÖ Ejecutar migraci√≥n de datos (una sola vez)');
  console.log('5. ‚úÖ Probar el sistema');
  
  console.log('\nüéØ FUNCIONALIDADES COMPLETADAS:');
  console.log('==============================');
  console.log('‚úÖ Renovaci√≥n autom√°tica mensual');
  console.log('‚úÖ Dashboard unificado con estad√≠sticas');
  console.log('‚úÖ Gesti√≥n individual por usuario');
  console.log('‚úÖ Renovaci√≥n manual de membres√≠as vencidas');
  console.log('‚úÖ Proceso masivo con barra de progreso');
  console.log('‚úÖ Generaci√≥n de reportes Excel completos');
  console.log('‚úÖ Control de auto-renovaci√≥n por membres√≠a');
  console.log('‚úÖ Actualizaci√≥n autom√°tica de precios');
  console.log('‚úÖ Sistema de logging completo');
  console.log('‚úÖ Manejo robusto de errores');
  
  console.log('\nüìä REPORTES EXCEL DISPONIBLES:');
  console.log('=============================');
  console.log('üìà Reporte de Membres√≠as:');
  console.log('   ‚Ä¢ Listado completo de socios');
  console.log('   ‚Ä¢ Estado de pagos por mes');
  console.log('   ‚Ä¢ Configuraci√≥n de auto-renovaci√≥n');
  console.log('   ‚Ä¢ Asistencias y fechas de vencimiento');
  console.log('');
  console.log('üîÑ Reporte de Renovaciones:');
  console.log('   ‚Ä¢ Renovaciones procesadas autom√°ticamente');
  console.log('   ‚Ä¢ Errores y problemas encontrados');
  console.log('   ‚Ä¢ Cambios de precios aplicados');
  console.log('   ‚Ä¢ Historial de procesos');
  
  console.log('\nüéÆ C√ìMO USAR EL SISTEMA:');
  console.log('======================');
  console.log('1. üè† Dashboard Principal:');
  console.log('   ‚Ä¢ Ve estad√≠sticas en tiempo real');
  console.log('   ‚Ä¢ Procesa renovaciones pendientes');
  console.log('   ‚Ä¢ Monitorea el estado del sistema');
  console.log('');
  console.log('2. ‚ö†Ô∏è  Pesta√±a "Vencidas":');
  console.log('   ‚Ä¢ Lista membres√≠as que requieren renovaci√≥n');
  console.log('   ‚Ä¢ Renovaci√≥n individual o masiva');
  console.log('   ‚Ä¢ Proceso con barra de progreso');
  console.log('');
  console.log('3. üë• Pesta√±a "Gestionar":');
  console.log('   ‚Ä¢ Vista completa de cada socio');
  console.log('   ‚Ä¢ Control granular de membres√≠as');
  console.log('   ‚Ä¢ Configuraci√≥n de auto-renovaci√≥n');
  console.log('   ‚Ä¢ B√∫squeda y filtros avanzados');
  console.log('');
  console.log('4. üìä Pesta√±a "Reportes":');
  console.log('   ‚Ä¢ Selecciona mes para reportes');
  console.log('   ‚Ä¢ Genera Excel de membres√≠as');
  console.log('   ‚Ä¢ Genera Excel de renovaciones');
  console.log('   ‚Ä¢ Descarga autom√°tica de archivos');
  
  console.log('\nü§ñ AUTOMATIZACI√ìN:');
  console.log('=================');
  console.log('‚Ä¢ El sistema se ejecuta autom√°ticamente los primeros 3 d√≠as de cada mes');
  console.log('‚Ä¢ Solo renueva membres√≠as con auto-renovaci√≥n habilitada');
  console.log('‚Ä¢ Actualiza precios autom√°ticamente desde las actividades');
  console.log('‚Ä¢ Crea nuevas membres√≠as v√°lidas por 30 d√≠as');
  console.log('‚Ä¢ Genera transacciones pendientes de pago');
  console.log('‚Ä¢ Registra todos los procesos en logs');
  
  console.log('\nüîÑ MIGRACI√ìN DE DATOS:');
  console.log('=====================');
  console.log('‚ö†Ô∏è  IMPORTANTE: Ejecutar UNA SOLA VEZ en la consola del navegador:');
  console.log('');
  console.log('// 1. Migrar datos existentes');
  console.log('import { MembershipMigrationUtil } from "./utils/membershipMigration.util";');
  console.log('await MembershipMigrationUtil.migrateMembershipsToNewSystem("TU_GYM_ID");');
  console.log('');
  console.log('// 2. Limpiar datos inconsistentes (opcional)');
  console.log('await MembershipMigrationUtil.cleanInconsistentData("TU_GYM_ID");');
  
  console.log('\nüß™ PRUEBAS RECOMENDADAS:');
  console.log('=======================');
  console.log('1. Verificar que el dashboard carga sin errores');
  console.log('2. Probar renovaci√≥n individual de una membres√≠a vencida');
  console.log('3. Configurar auto-renovaci√≥n en algunas membres√≠as');
  console.log('4. Generar reporte Excel de prueba');
  console.log('5. Verificar que la automatizaci√≥n est√° activa');
  
  console.log('\nüìû SOPORTE Y TROUBLESHOOTING:');
  console.log('============================');
  console.log('Si encuentras errores:');
  console.log('1. Verifica que todos los archivos est√©n creados');
  console.log('2. Confirma que XLSX est√° instalado');
  console.log('3. Revisa la consola del navegador para errores');
  console.log('4. Ejecuta la migraci√≥n de datos si no lo has hecho');
  console.log('5. Reinicia el servidor de desarrollo');
  
  console.log('\nüéâ ¬°INSTALACI√ìN COMPLETA!');
  console.log('El sistema est√° listo para usar.');
  console.log('Disfruta de la gesti√≥n automatizada de renovaciones! üöÄ');
};

/**
 * Script de migraci√≥n paso a paso
 */
export const runMigrationScript = async (gymId: string): Promise<void> => {
  if (!gymId) {
    console.error('‚ùå Debes proporcionar el ID del gimnasio');
    return;
  }
  
  console.log('üîÑ INICIANDO MIGRACI√ìN DE DATOS...');
  console.log('=================================');
  
  try {
    // Importar utilidad de migraci√≥n
    const MembershipMigrationUtilModule = await import('./membershipMigration.util');
    const { MembershipMigrationUtil } = MembershipMigrationUtilModule;
    
    
    console.log('üìä Paso 1: Migrando membres√≠as al nuevo formato...');
    await MembershipMigrationUtil.migrateMembershipsToNewSystem(gymId);
    
    console.log('üßπ Paso 2: Limpiando datos inconsistentes...');
    await MembershipMigrationUtil.cleanInconsistentData(gymId);
    
    console.log('‚úÖ ¬°MIGRACI√ìN COMPLETADA EXITOSAMENTE!');
    console.log('');
    console.log('üéØ Pr√≥ximos pasos:');
    console.log('1. Recarga la p√°gina');
    console.log('2. Ve al dashboard de renovaciones');
    console.log('3. Verifica que las estad√≠sticas se muestren correctamente');
    console.log('4. Prueba generar un reporte Excel');
    
  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error);
    console.log('');
    console.log('üîß Posibles soluciones:');
    console.log('‚Ä¢ Verifica que el ID del gimnasio sea correcto');
    console.log('‚Ä¢ Confirma que tienes permisos en Firebase');
    console.log('‚Ä¢ Revisa que todos los archivos est√©n creados');
  }
};

/**
 * Verificar estado del sistema despu√©s de la instalaci√≥n
 */
export const checkSystemHealth = async (gymId: string): Promise<void> => {
  if (!gymId) {
    console.error('‚ùå Debes proporcionar el ID del gimnasio');
    return;
  }
  
  console.log('üè• VERIFICACI√ìN DE SALUD DEL SISTEMA');
  console.log('===================================');
  
  try {
    // Importar servicio de renovaciones
    const { membershipRenewalService } = await import('../services/membershipRenewalService');
    
    console.log('üìä Obteniendo estad√≠sticas del sistema...');
    const stats = await membershipRenewalService.getRenewalStats(gymId);
    
    console.log('‚úÖ Sistema funcionando correctamente!');
    console.log('');
    console.log('üìà Estad√≠sticas actuales:');
    console.log(`‚Ä¢ Membres√≠as totales: ${stats.totalMemberships}`);
    console.log(`‚Ä¢ Con auto-renovaci√≥n: ${stats.withAutoRenewal}`);
    console.log(`‚Ä¢ Vencidas: ${stats.expired}`);
    console.log(`‚Ä¢ Vencen pronto: ${stats.expiringSoon}`);
    console.log(`‚Ä¢ Renovadas este mes: ${stats.renewedThisMonth}`);
    
    if (stats.expired > 0) {
      console.log('');
      console.log('‚ö†Ô∏è  Hay membres√≠as vencidas pendientes de renovaci√≥n.');
      console.log('Ve al dashboard para procesarlas.');
    }
    
    if (stats.withAutoRenewal === 0) {
      console.log('');
      console.log('üí° Sugerencia: Configura auto-renovaci√≥n en algunas membres√≠as');
      console.log('para aprovechar al m√°ximo el sistema automatizado.');
    }
    
  } catch (error) {
    console.error('‚ùå Error verificando el sistema:', error);
    console.log('');
    console.log('üîß El sistema puede no estar correctamente instalado.');
    console.log('Revisa que todos los archivos est√©n creados.');
  }
};

// Exportar funciones para usar en consola
declare global {
  interface Window {
    MultiGymInstallation: {
      runCompleteCheck: typeof runCompleteInstallationCheck;
      runMigration: typeof runMigrationScript;
      checkHealth: typeof checkSystemHealth;
    };
  }
}

// Hacer funciones disponibles globalmente
if (typeof window !== 'undefined') {
  window.MultiGymInstallation = {
    runCompleteCheck: runCompleteInstallationCheck,
    runMigration: runMigrationScript,
    checkHealth: checkSystemHealth
  };
  
  // Ejecutar verificaci√≥n autom√°ticamente
  setTimeout(() => {
    console.log('üîç Sistema de Renovaciones MultiGym cargado.');
    console.log('Ejecuta: MultiGymInstallation.runCompleteCheck() para ver el estado de instalaci√≥n');
  }, 2000);
}

/*
===========================================
COMANDOS PARA EJECUTAR EN CONSOLA DEL NAVEGADOR:
===========================================

// 1. Verificar instalaci√≥n completa
MultiGymInstallation.runCompleteCheck();

// 2. Ejecutar migraci√≥n de datos (UNA SOLA VEZ)
await MultiGymInstallation.runMigration('TU_GYM_ID_AQUI');

// 3. Verificar estado del sistema
await MultiGymInstallation.checkHealth('TU_GYM_ID_AQUI');

===========================================
*/;